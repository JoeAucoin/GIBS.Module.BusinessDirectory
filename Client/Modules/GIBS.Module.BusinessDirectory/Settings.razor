@namespace GIBS.Module.BusinessDirectory
@inherits ModuleBase
@inject ISettingService SettingService
@inject IStringLocalizer<Settings> Localizer
@inject IFolderService FolderService

<div class="container">
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="googleApiKey" HelpText="Enter a Google ApiKey" ResourceKey="GoogleApiKey" ResourceType="@resourceType">Name: </Label>
            <div class="col-sm-9">
            <input id="googleApiKey" type="text" class="form-control" @bind="@_googleApiKey" />
            </div>
    </div>

    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="featuredCount" HelpText="How many featured properties should display?" ResourceKey="FeaturedCount" ResourceType="@resourceType">Name: </Label>
        <div class="col-sm-9">
            <input id="featuredCount" type="text" class="form-control" @bind="@_featuredCount" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="folderList" HelpText="Select the image folder" ResourceKey="ImageFolder" ResourceType="@resourceType">Image Folder: </Label>
        <div class="col-sm-9">
            <select id="folderList" class="form-select" @bind="@_imageFolder">
                @foreach (Folder folder in _folders)
                {
                    <option value="@(folder.FolderId)">@(new string('-', folder.Level * 2))@(folder.Name)</option>
                }
            </select>
        </div>
    </div>

</div>

@code {

    private string resourceType = "GIBS.Module.BusinessDirectory.Settings, GIBS.Module.BusinessDirectory.Client.Oqtane"; // for localization
    public override string Title => "Business Directory Settings";
    private List<Folder> _folders = new List<Folder>();

    string _googleApiKey;

    string _featuredCount;
    string _imageFolder;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            _googleApiKey = SettingService.GetSetting(settings, "GoogleApiKey", "");
            _featuredCount = SettingService.GetSetting(settings, "FeaturedCount", "3");
            _imageFolder = SettingService.GetSetting(settings, "ImageFolder", "Root");
            _folders = await FolderService.GetFoldersAsync(PageState.Site.SiteId);
        }
        catch (Exception ex)
        {
            AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            SettingService.SetSetting(settings, "GoogleApiKey", _googleApiKey);
            SettingService.SetSetting(settings, "FeaturedCount", _featuredCount);
            SettingService.SetSetting(settings, "ImageFolder", _imageFolder);
            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    private async void FolderChanged(ChangeEventArgs e)
    {
        try
        {
          //  _folderId = int.Parse((string)e.Value);
          //  await GetFiles();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Files {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.File.Load"], MessageType.Error);
        }
    }

}
